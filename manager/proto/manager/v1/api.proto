
syntax = "proto3";
package manager.v1;

import "google/api/annotations.proto";
import "manager/v1/common.proto";
import "buf/validate/validate.proto";

service ProxyApiService {
    rpc GetApi(GetApiRequest) returns (GetApiResponse) {
        option (google.api.http) = {
            get: "/v1/proxy-api"
        };
    }

    rpc GetApiByProvider(GetApiByProviderRequest) returns (GetApiByProviderResponse) {
        option (google.api.http) = {
            get: "/v1/proxy-api/provider"
        };
    }
    rpc DeleteApiByProvider(DeleteApiByProviderRequest) returns (DeleteApiByProviderResponse) {
        option (google.api.http) = {
            delete: "/v1/proxy-api/provider"
        };
    }

    rpc DeleteApi(DeleteApiRequest) returns (DeleteApiResponse) {
        option (google.api.http) = {
            delete: "/v1/proxy-api"
        };
    }

    rpc AddApi(AddApiRequest) returns (AddApiResponse) {
        option (google.api.http) = {
            post: "/v1/proxy-api"
            body: "*"
        };
    }
   rpc UpdateApi(UpdateApiRequest) returns (UpdateApiResponse) {
    option (google.api.http) = {
        patch: "/v1/proxy-api"
    };
  }
}

message Service {
  string host  = 1 [(buf.validate.field).required = true, (buf.validate.field).cel = {
    id: "host",
    message: "host must be a valid ip address or domain name with optional specify port, example: 127.0.0.1:80, localhost:8080, localhost",
    expression: "matches(this, '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(:\\\\d{1,5})?$')||matches(this,'(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]*[a-zA-Z0-9])\\\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\\-]*[A-Za-z0-9])(:\\\\d{1,5})?$')"
  }];
  string name = 2 [(buf.validate.field).required = true, 
  (buf.validate.field).cel = {
    id: "name",
    message: "service name is invalid (must be consisted with ascii characters and sperate by '.', example: User.ListUser)",
    expression: "matches(this, '^([a-zA-Z\\\\-_\\\\d]+\\\\.?)+$')",
  }];
  map<string,string> params = 3;
}

message ProxyAPI {
    Service service = 1;
    double interval = 2 [(buf.validate.field).required = true, (buf.validate.field).double.gt = 0 ];
    string name = 3 [(buf.validate.field).required = true, (buf.validate.field).string.min_len=1];
}


message GetApiRequest {
  string id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.min_len= 1 ];
}

message GetApiResponse {
  ResponseStatus status = 1;
  ProxyAPI api = 2;
}

message GetApiByProviderRequest {
  string provider_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.min_len= 1 ];
}

message GetApiByProviderResponse {
  ResponseStatus status = 1;
  repeated ProxyAPI proxy_apis = 2;
}

message DeleteApiByProviderRequest {
  string provider_id = 1;
}

message DeleteApiByProviderResponse {
  ResponseStatus status = 1;
  repeated string ids = 2;
}

message AddApiRequest {
  string provider_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.min_len = 1, (buf.validate.field).string.max_len = 32];
  ProxyAPI api = 2 [(buf.validate.field).required= true];
}

message AddApiResponse {
  ResponseStatus status = 1;
  string id = 2;
}

message DeleteApiRequest {
  string id = 1;
}

message DeleteApiResponse {
  ResponseStatus status = 1;
}

message UpdateApiRequest {
  string id = 1;
  ProxyAPI api = 2;
}

message UpdateApiResponse {
  ResponseStatus status = 1;
}